#include "RTE_Components.h"
#include  CMSIS_device_header
#include "cmsis_os2.h"

#include "MKL25Z4.H"
#include "stdio.h"
#include "time.h"

/*

#include "MKL25Z4.h"                    // Device header
#define BAUD_RATE 9600
#define UART_RX_PORTE23 23
#define UART2_INT_PRIO 128	

*/



#define MASK(x) (1 << (x))

#define PTB3 3
#define PTB2 2

#define PTB1 1
#define PTB0 0
#define PTA12 12


/*
#define NUM_NOTES 30

#define RED_LED 18 // PortB Pin 18
#define GREEN_LED 19 // PortB Pin 19
#define BLUE_LED 1 // PortD Pin 1

#define LED_RED 3
#define LED_MASK(x) (x&0x06)
#define BIT0_MASK(x) (x&0x01)

#define RED_LED_MASK(x) (x&0x03)

#define RED_LED_OFF 2

*/

#define MOTOR_MASK(x) (x&0x08)
#define DIRECTION_MASK(x) (x&0x04)

#define FW_MASK(x) (x&0x0b)
#define RV_MASK(x) (x&0x09)
#define LT_MASK(x) (x&0x0d)
#define RT_MASK(x) (x&0x0f)

#define MODE_MASK(x) (x&0xF0)
#define STATE_MASK(x) ((x&0x0E)>> 1)
#define ENABLE_MASK(x) (x&0x01)

#define FW 11
#define RV 9
#define LT 13
#define RT 15






void initMotorPWM(void) {
	//ENABLE POWER TO PWM
	//SIM->SCGC6 |= (SIM_SCGC6_TPM1_MASK)|(SIM_SCGC6_TPM2_MASK);
	
	//Choose PWM type
	SIM->SOPT2 &= ~SIM_SOPT2_TPMSRC_MASK;
	
	SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1);
	
	//Enabling timer for channels
	TPM1->SC &= ~(TPM_SC_CPWMS_MASK|TPM_SC_CMOD_MASK|TPM_SC_PS_MASK);
	TPM1->SC |= (TPM_SC_CMOD(1)|TPM_SC_PS(7));
	
	TPM2->SC &= ~(TPM_SC_CPWMS_MASK|TPM_SC_CMOD_MASK|TPM_SC_PS_MASK);
	TPM2->SC |= (TPM_SC_CMOD(1)|TPM_SC_PS(7));

	
	TPM1_C1SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	TPM1_C0SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	
	TPM2_C1SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	TPM2_C0SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	
	
	
	TPM1_C1SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1));    
	TPM1_C0SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1)); //added line
	
	TPM2_C1SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1));    
	TPM2_C0SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1)); //added line
	
}

unsigned int counter = 0;
/*
typedef enum colours {
	red_led = RED_LED,
	green_led = GREEN_LED, 
	blue_led = BLUE_LED
} colours_t;
	
char led_colours[3][2] = {{0,red_led}, {1,green_led}, {2,blue_led}};
*/










/* GPIO initialization function */







void initMotorGPIO(void) {

	// Enable Clock to PORTB and PORTD
	//SIM->SCGC5 |= ((SIM_SCGC5_PORTB_MASK) | (SIM_SCGC5_PORTD_MASK));

	// Configure MUX settings to make all 3 pins GPIO
	/*
	PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1);
	PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1);
	PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK;
	PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1);
	*/
	
	//initilaize motors
  PORTB->PCR[PTB1] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB1] |= PORT_PCR_MUX(3);//TPM1CH1
	PORTB->PCR[PTB0] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB0] |= PORT_PCR_MUX(3);//TPM1CH0
	
	PORTB->PCR[PTB3] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB3] |= PORT_PCR_MUX(3);//TPM2CH1
	PORTB->PCR[PTB2] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB2] |= PORT_PCR_MUX(3);//TPM2CH0
	
	

// Set Data Direction Registers for PortB and PortD
//motors
  PTB->PDDR |= (MASK(PTB1));
	PTB->PDDR |= (MASK(PTB0));
	
	PTB->PDDR |= (MASK(PTB3));
	PTB->PDDR |= (MASK(PTB2));
	
	
	
	// Set Data Direction Registers for PortB and PortD
	//PTB->PDDR |= (MASK(RED_LED) | MASK(GREEN_LED));
	//PTD->PDDR |= MASK(BLUE_LED);

}

//switch of the LED
/*
void offLED(void) {
	PTB->PSOR = MASK(RED_LED) | MASK(GREEN_LED); //since LED is active low
	PTD->PSOR = MASK(BLUE_LED);
}
*/

//high-level library function
//takes in colour and controls appropriate LED

/*
void led_control(colours_t colour) {
	offLED();
	switch(colour) {
		case red_led:
			PTB->PCOR = MASK(RED_LED);
			break;
		case green_led:
			PTB->PCOR = MASK(GREEN_LED);
			break;
		case blue_led:
			PTD->PCOR = MASK(BLUE_LED);
			break;
		default:
			offLED();
	}
}


*/









/* DELAY ROUTINE*/








void forward(void) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000/2;
	TPM2_C0V = 375000/2;//added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;



	delay(0x200000);
	
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C1V = 0;
	TPM2_C0V = 0;
	
}

void backward(void) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	

	TPM1_C0V = 375000/2;//added code
	TPM2_C1V = 375000/2;
	
	TPM2_C0V = 0;//added code
	TPM1_C1V = 0;
	
	delay(0x200000);
	
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C0V = 0;
	TPM2_C1V = 0;
	
}

void left(void) {
	TPM1->MOD = 375000;		
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000/4;
	TPM2_C0V = 375000;//added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;



	delay(0x200000);
	
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C1V = 0;
	TPM2_C0V = 0;
	
	
}

void right(void) {
	
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 375000;
	TPM2_C0V = 375000/4;//added code
	
	TPM1_C0V = 0;
	TPM2_C1V = 0;

	delay(0x200000);
	
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C1V = 0;
	TPM2_C0V = 0;
	
	
}

void sharpLeft(){
		TPM1->MOD = 375000;		
	  TPM2->MOD = 375000;

		TPM1_C1V = 0;
		TPM2_C0V = 375000/2;//
		
		TPM1_C0V = 375000/2;
		TPM2_C1V = 0;//NO CHANGE

		delay(0x80000);
		
		TPM1->MOD = 0;
		TPM2->MOD = 0;
		
		TPM1_C0V = 0;
		TPM2_C0V = 0;


}

void sharpRight() {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 375000/4;//no change
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 0;//no chnage
	TPM2_C1V = 375000/4;
	delay(0x80000);
	
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C1V = 0;
	TPM2_C1V = 0;


}

void offMotors(void) {
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	TPM1_C1V = 0;
	TPM2_C0V = 0;
}
















/* MAIN FUNCTION */



/*




int main(void){
	
	SystemCoreClockUpdate();
	initUART2(BAUD_RATE);
	initGPIO();
	initPWM();
	offMotors();
	offLED();
	while(1){

		
		if(ENABLE_MASK(rx_data)){
				//MOTOR MODE
				if(MODE_MASK(rx_data)){
					
		
					switch(STATE_MASK(rx_data)){
						case 0:
							forward();
							break;
						case 1:
							backward();
							break;
						case 2:
							left();
							break;
						case 3:
							right();
							break;
						default:
							offMotors();
					}
					
					
					}
				
				
				//LED mode
				else {
					
					if(MODE_MASK(rx_data) == 0) {
						led_control(led_colours[0][1]);
					}
				}
			
		}
		else {
			offMotors();
			offLED();
		}
		

	
	}
}


*/


