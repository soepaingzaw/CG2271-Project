#include "RTE_Components.h"
#include  CMSIS_device_header
#include "cmsis_os2.h"

#include "MKL25Z4.H"
#include "stdio.h"
#include "time.h"

#define MASK(x) (1 << (x))

#define PTB3 3
#define PTB2 2

#define PTB1 1
#define PTB0 0
#define PTA12 12


#define MOTOR_MASK(x) (x&0x08)
#define DIRECTION_MASK(x) (x&0x04)

#define FW_MASK(x) (x&0x0b)
#define RV_MASK(x) (x&0x09)
#define LT_MASK(x) (x&0x0d)
#define RT_MASK(x) (x&0x0f)

#define MODE_MASK(x) (x&0xF0)
#define STATE_MASK(x) ((x&0x0E)>> 1)


#define FW 11
#define RV 9
#define LT 13
#define RT 15



void initMotorPWM(void) {
	
	//Choose PWM type
	SIM->SOPT2 &= ~SIM_SOPT2_TPMSRC_MASK;
	
	SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1);
	
	//Enabling timer for channels
	TPM1->SC &= ~(TPM_SC_CPWMS_MASK|TPM_SC_CMOD_MASK|TPM_SC_PS_MASK);
	TPM1->SC |= (TPM_SC_CMOD(1)|TPM_SC_PS(7));
	
	TPM2->SC &= ~(TPM_SC_CPWMS_MASK|TPM_SC_CMOD_MASK|TPM_SC_PS_MASK);
	TPM2->SC |= (TPM_SC_CMOD(1)|TPM_SC_PS(7));

	
	TPM1_C1SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	TPM1_C0SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	
	TPM2_C1SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	TPM2_C0SC  &= ~(TPM_CnSC_ELSA_MASK |TPM_CnSC_ELSB_MASK | TPM_CnSC_MSA_MASK |TPM_CnSC_MSB_MASK);
	
	
	
	TPM1_C1SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1));    
	TPM1_C0SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1)); //added line
	
	TPM2_C1SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1));    
	TPM2_C0SC |=(TPM_CnSC_ELSB(1)|TPM_CnSC_MSB(1)); //added line
	
}

unsigned int counter = 0;



void initMotorGPIO(void) {
	
	//initilaize motors
  PORTB->PCR[PTB1] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB1] |= PORT_PCR_MUX(3);//TPM1CH1
	PORTB->PCR[PTB0] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB0] |= PORT_PCR_MUX(3);//TPM1CH0
	
	PORTB->PCR[PTB3] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB3] |= PORT_PCR_MUX(3);//TPM2CH1
	PORTB->PCR[PTB2] &= ~PORT_PCR_MUX_MASK;
  PORTB->PCR[PTB2] |= PORT_PCR_MUX(3);//TPM2CH0
	

// Set Data Direction Registers for PortB and PortD
//motors
  PTB->PDDR |= (MASK(PTB1));
	PTB->PDDR |= (MASK(PTB0));
	
	PTB->PDDR |= (MASK(PTB3));
	PTB->PDDR |= (MASK(PTB2));

}

void forward(void) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	

	TPM1_C0V = 375000;//added code
	TPM2_C1V = 375000;
	
	TPM2_C0V = 0;//added code
	TPM1_C1V = 0;
	
	osDelay(100);

}

void backward(void) {


	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000;
	TPM2_C0V = 375000; //added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;


  osDelay(100);
	
}

void left(void) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 0;
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 375000;
	TPM2_C1V = 0;

	osDelay(100);

	
}

void right(void) {
	TPM1->MOD = 375000;		
	TPM2->MOD = 375000;
	
	TPM1_C1V = 0;
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 375000;



	osDelay(100);

}






void leftReverse(void){
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 375000;
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 0;
	TPM2_C1V = 0;

	osDelay(100);
	
}

void rightReverse(void){
	
	TPM1->MOD = 375000;		
	TPM2->MOD = 375000;
	
	TPM1_C1V = 0;
	TPM2_C0V = 375000;//added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;



	osDelay(100);
	
}

void sharpLeft(){
		TPM1->MOD = 375000;		
	  TPM2->MOD = 375000;

		TPM1_C1V = 0;
		TPM2_C0V = 375000/2;//
		
		TPM1_C0V = 375000/2;
		TPM2_C1V = 0;//NO CHANGE

		osDelay(50);

}

void sharpRight() {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 375000/2;//no change
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 0;//no chnage
	TPM2_C1V = 375000/2;
	
	osDelay(50);

}

void offMotors(void) {
	TPM1->MOD = 0;
	TPM2->MOD = 0;
	
	
	TPM1_C0V = 0;
	TPM1_C1V = 0;
	TPM2_C0V = 0;
	TPM2_C1V = 0;
}

void hardCodeChallenge2(void) {
	
	forward();
	osDelay(1000);
	offMotors();
	
	osDelay(50);
	
	//sharpRight();
	right();
	osDelay(5000);
	offMotors();
	
	osDelay(50);
	
	forward();
	osDelay(500);
	offMotors();
	
	osDelay(50);
	
	//sharpLeft();
	left();
	osDelay(5000);
	offMotors();
	
	osDelay(50);
	
	forward();
	osDelay(500);
	offMotors();
	
	osDelay(50);
	
	//sharpLeft();
	left();
	osDelay(5000);
	offMotors();
	
	osDelay(50);
	
	forward();
	osDelay(1000);
	offMotors();

	osDelay(50);
	//sharpLeft();
	left();
	osDelay(5000);
	offMotors();
	
	osDelay(50);
	
	forward();
	osDelay(500);
	offMotors();
	
	osDelay(50);
	
	//sharpRight();
	right();
	osDelay(5000);
	offMotors();

	osDelay(50);
	
	forward();
	osDelay(1000);
	offMotors();

	osDelay(50);
}
///////////////////////////////////////////////////

void leftSharp(int ms){
		TPM1->MOD = 375000;		
	  TPM2->MOD = 375000;

		TPM1_C1V = 0;
		TPM2_C0V = 375000/2;//
		
		TPM1_C0V = 375000/2;
		TPM2_C1V = 0;//NO CHANGE

		osDelay(ms);

}

void rightSharp(int ms) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
		
	TPM1_C1V = 375000/2;//no change
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 0;//no chnage
	TPM2_C1V = 375000/2;
	
	osDelay(ms);

}

void rightCircle(int ms) {
	TPM1->MOD = 375000;		
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000/4;
	TPM2_C0V = 0;//added code
	
	TPM1_C0V = 375000;//added code
	TPM2_C1V = 375000;



	osDelay(ms);

}


void fw(int ms) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	

	TPM1_C0V = 375000/3;//added code
	TPM2_C1V = 375000/3;
	
	TPM2_C0V = 0;//added code
	TPM1_C1V = 0;
	
	osDelay(ms);

}

void fws(int ms) {
	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	

	TPM1_C0V = 375000/4;//added code
	TPM2_C1V = 375000/4;
	
	TPM2_C0V = 0;//added code
	TPM1_C1V = 0;
	
	osDelay(ms);

}



void rv(int ms) {


	TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000/4;
	TPM2_C0V = 375000/4; //added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;


  osDelay(ms);
	
		TPM1->MOD = 375000;
	TPM2->MOD = 375000;
	
	TPM1_C1V = 375000;
	TPM2_C0V = 375000; //added code
	
	TPM1_C0V = 0;//added code
	TPM2_C1V = 0;
	
}
int l = 380;
int r = 380;
int fullForward = 750;
int halfForward = 500;

void selfDriving(void){
		
	  fw(1);
	//implement! with osDleay inside once in task/thread
		sensor();
	
		//rv(50);
	  //offMotors();

		leftSharp(l);//leftSharp(500);
	
		offMotors();
		osDelay(1000);
	
	
	  rightCircle(5000);
	
		offMotors();
		osDelay(1000);
	/*
			
		fw(halfForward);	
		offMotors();
		osDelay(1000);
	
		//bottom left
		rightSharp(r);//rightSharp(500);
		offMotors();
		osDelay(1000);
			
		fw(fullForward);	
		offMotors();
		osDelay(1000);
		
		//top left
		rightSharp(r);
		offMotors();
		osDelay(1000);
		
		fw(fullForward);	
		offMotors();
		osDelay(1000);
		//top right
		rightSharp(r);
		offMotors();
		osDelay(1000);
		
		fw(fullForward);	
		offMotors();
		osDelay(1000);
		
		//bottom right
		rightSharp(r);
		offMotors();
		osDelay(1000);
		
		fw(halfForward);	
		offMotors();
		osDelay(1000);
		*/
		
		leftSharp(l);
		//osDelay(500);
		offMotors();
		osDelay(1000);
		
		fw(1);
		sensor();
		//rv(50);
	  //offMotors();
		
	
	
}




