#include "MKL25Z4.H"
#include "stdio.h"
#include "time.h"
#define RED_LED 18 // PortB Pin 18
#define GREEN_LED 19 // PortB Pin 19
#define BLUE_LED 1 // PortD Pin 1
#define MASK(x) (1 << (x))

#define ECHOPIN 6
#define TRIGPIN 5

double foo = 4;

double distance = 0;

uint32_t count = 0;

int echopintaliveflag = 0;


void InitGPIO(void)
{
// Enable Clock to PORTB and PORTD
SIM->SCGC5 |= ((SIM_SCGC5_PORTB_MASK) | (SIM_SCGC5_PORTD_MASK)|(SIM_SCGC5_PORTC_MASK));
// Configure MUX settings to make all 3 pins GPIO
PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK;
PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1);
PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK;
PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1);
PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK;
PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1);
// Set Data Direction Registers for PortB and PortD
PTB->PDDR |= (MASK(RED_LED) | MASK(GREEN_LED));
PTD->PDDR |= MASK(BLUE_LED);
}

void initUltraSound(void){
	
	PORTC->PCR[TRIGPIN] &= ~PORT_PCR_MUX_MASK;
  PORTC->PCR[TRIGPIN] |= PORT_PCR_MUX(1);
	PORTC->PCR[ECHOPIN] &= ~PORT_PCR_MUX_MASK;
  PORTC->PCR[ECHOPIN] |= PORT_PCR_MUX(1);
	
	PTC->PDDR |= MASK(TRIGPIN);
	PTC->PDDR &= ~MASK(ECHOPIN);
}

void onTrigPin(void) {
	PTC->PSOR = MASK(TRIGPIN);
	
}

void offTrigPin(void) {
	PTC->PCOR = MASK(TRIGPIN);
	
}

void redOn(void) {
		PTB->PCOR = MASK(RED_LED);
		
		PTB->PSOR = MASK(GREEN_LED);
		
		PTD->PSOR = MASK(BLUE_LED);

}

void greenOn(void) {
		PTB->PSOR = MASK(RED_LED);
		
		PTB->PCOR = MASK(GREEN_LED);
		
		PTD->PSOR = MASK(BLUE_LED);

}

void blueOn(void) {
		PTB->PSOR = MASK(RED_LED);
		
		PTB->PSOR = MASK(GREEN_LED);
		
		PTD->PCOR = MASK(BLUE_LED);

}

void offLED(void) {
		PTB->PSOR = MASK(RED_LED);
		
		PTB->PSOR = MASK(GREEN_LED);
		
		PTD->PSOR = MASK(BLUE_LED);

}

void delay(volatile uint32_t nof) {
		while (nof!=0) {
			//__ASM("NOP");
			nof--;
		}
		
}


int main (void) {
	
	double microseconds;
	
	int flag;
	
	SystemCoreClockUpdate();
	InitGPIO();
	initUltraSound();
	
	offLED();
	
	while(1){
		
		count = 0;
		flag = 1;
		
		//stop for 2 microseconds
		delay(0xA);

		//turn on and off for 10 microseconds
		onTrigPin();
		delay(0x30);	
		offTrigPin();
	
		while(!(PTC->PDIR & MASK(ECHOPIN)));
		
		while(PTC->PDIR & MASK(ECHOPIN)){
			count++;	
			
			if(!(PTC->PDIR & MASK(ECHOPIN))){
				
				break;
			}
		}
		
		microseconds = (count * 5)/24.0;
		
		distance =  microseconds * 0.034 / 2;
		
		if(distance<5 && flag){
			redOn();
			delay(0x493E00);
			offLED();
			delay(0x493E00);			
		}
		else {
			greenOn();
			delay(0x493E00);
			offLED();
			delay(0x493E00);
		}
	}
}